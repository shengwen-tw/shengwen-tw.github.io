{"version":3,"file":"component---gatsby-theme-academic-src-templates-tags-index-jsx-91556cbf4c628ac4cd74.js","mappings":"yQAsMA,UAlLgBA,IAGT,IAHU,KACfC,EAAI,YACJC,GACDF,EACC,MAAMG,EAAUD,EAAYE,IAMtBC,EAAOJ,EAAKK,OAAOC,MACnBC,EAAQC,IAASJ,GAAOK,GAAsC,UAA9BA,EAAIC,KAAKC,YAAYC,OACrDC,EAAWL,IAASJ,GAAOK,GAAsC,aAA9BA,EAAIC,KAAKC,YAAYC,OACxDE,EAAOd,EAAKe,OAASf,EAAKe,OAAOT,MAAQ,GACzCU,EAAUC,IAAYC,IAAQJ,GAAOX,GAAQA,EAAIO,KAAKS,OAAO,QAE7DhB,EAAMa,EAAQd,GACdkB,EAAcjB,EAAMA,EAAIkB,KAAO,IAC/BC,EAAiBnB,EAAMA,EAAIoB,YAAc,GAE/C,OACEC,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAACC,EAAAA,EAAG,CACFC,MAAOxB,EACPqB,YAAa,kBAAkBrB,MAAYoB,KAC3CD,KAAMM,EAAAA,EAAMC,eAAeR,EAAajB,GACxC0B,SAAU,CAAC3B,KAEbsB,EAAAA,cAAA,OAAKM,UAAW,kBAAkBC,EAAAA,MAChCP,EAAAA,cAAA,MAAIM,UAAU,iBAAgB,IAE3B5B,GAKHsB,EAAAA,cAAA,MAAIM,UAAU,cACXR,IAGJT,EAASmB,OAAS,EACjBR,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAAA,UAAI,YACJA,EAAAA,cAACS,EAAAA,EAAG,CAACC,OAAQ,CAAC,GAAI,IAAKtB,KAAK,QACzBC,EAASsB,KAAI,CAACC,EAAMC,IAEnBb,EAAAA,cAACc,EAAAA,EAAG,CAACD,IAAKA,EAAKE,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAIC,GAAI,IACzClB,EAAAA,cAACmB,EAAAA,EAAY,CAAC3C,KAAMoC,EAAMpB,QAASA,SAKzC,KACHT,EAAMyB,OAAS,EACdR,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAAA,UAAI,SACJA,EAAAA,cAACS,EAAAA,EAAG,CAACC,OAAQ,CAAC,GAAI,IAAKtB,KAAK,QACzBL,EAAM4B,KAAI,CAACC,EAAMC,IAEhBb,EAAAA,cAACc,EAAAA,EAAG,CAACD,IAAKA,EAAKE,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GACzClB,EAAAA,cAACoB,EAAAA,EAAQ,CAAC5C,KAAMoC,EAAMpB,QAASA,SAKrC,M","sources":["webpack://example/../gatsby-theme-academic/src/templates/tags/index.jsx"],"sourcesContent":["/* eslint-disable react/forbid-prop-types */\n/* Vendor imports */\nimport { Container, Row, Col } from 'rsuite';\nimport { graphql } from 'gatsby';\n// import Img from 'gatsby-image';\n/* App imports */\nimport _ from 'lodash';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport Header from '../../components/PageLayout/Header';\nimport SidebarWrapper from '../../components/PageLayout/Sidebar';\nimport PostCard from '../../components/PostCard';\n// import Statistics from '../../../content/statistics.json';\nimport ResearchCard from '../../components/ResearchCard';\nimport SEO from '../../components/Seo';\nimport Utils from '../../utils/pageUtils.mjs';\n\nimport * as style from './tags.module.less';\n\nconst TagPage = ({\n  data,\n  pageContext,\n}) => {\n  const tagName = pageContext.tag;\n  // const { tag } = pageContext;\n  // const tagName = Statistics.tags[tag].name || tag;\n  // const tagPagePath = siteMetadata.pages.tags;\n  // const tagImage = data.allFile.edges.find((edge) => edge.node.name === tag).node\n  //   .childImageSharp.fluid;\n  const docs = data.allMdx.edges;\n  const posts = _.filter(docs, (doc) => doc.node.frontmatter.type === 'posts');\n  const research = _.filter(docs, (doc) => doc.node.frontmatter.type === 'research');\n  const tags = data.allTag ? data.allTag.edges : [];\n  const tagsMap = _.mapValues(_.keyBy(tags, (tag) => tag.node.name), 'node');\n\n  const tag = tagsMap[tagName];\n  const tagPagePath = tag ? tag.path : '#';\n  const tagDescription = tag ? tag.description : '';\n\n  return (\n    <>\n      <SEO\n        title={tagName}\n        description={`All post about ${tagName}. ${tagDescription} `}\n        path={Utils.resolvePageUrl(tagPagePath, tag)}\n        keywords={[tagName]}\n      />\n      <div className={`marginTopTitle ${style.tagsList}`}>\n        <h1 className=\"titleSeparate\">\n          #\n          {tagName}\n        </h1>\n        {/* <div className={style.bannerImgContainer}> */}\n        {/*  <Img className={style.bannerImg} fluid={tagImage} alt={tagName} /> */}\n        {/* </div> */}\n        <h4 className=\"textCenter\">\n          {tagDescription}\n        </h4>\n      </div>\n      {research.length > 0 ? (\n        <>\n          <h2>Research</h2>\n          <Row gutter={[20, 20]} type=\"flex\">\n            {research.map((post, key) => (\n              // eslint-disable-next-line react/no-array-index-key\n              <Col key={key} xs={24} sm={24} md={24} lg={24}>\n                <ResearchCard data={post} tagsMap={tagsMap} />\n              </Col>\n            ))}\n          </Row>\n        </>\n      ) : null}\n      {posts.length > 0 ? (\n        <>\n          <h2>Posts</h2>\n          <Row gutter={[20, 20]} type=\"flex\">\n            {posts.map((post, key) => (\n              // eslint-disable-next-line react/no-array-index-key\n              <Col key={key} xs={24} sm={24} md={12} lg={8}>\n                <PostCard data={post} tagsMap={tagsMap} />\n              </Col>\n            ))}\n          </Row>\n        </>\n      ) : null}\n    </>\n  );\n};\n\nTagPage.propTypes = {\n  data: PropTypes.shape({\n    allTag: PropTypes.shape({\n      edges: PropTypes.arrayOf(\n        PropTypes.shape({\n          node: PropTypes.shape({\n            color: PropTypes.string.isRequired,\n            name: PropTypes.string.isRequired,\n            description: PropTypes.string,\n            path: PropTypes.string,\n          }),\n        }),\n      ).isRequired,\n    }).isRequired,\n    allMdx: PropTypes.shape({\n      edges: PropTypes.arrayOf(PropTypes.object).isRequired,\n    }).isRequired,\n    allFile: PropTypes.shape({\n      edges: PropTypes.arrayOf(\n        PropTypes.shape({\n          node: PropTypes.shape({\n            name: PropTypes.string.isRequired,\n            childImageSharp: PropTypes.shape({\n              gatsbyImageData: PropTypes.object.isRequired,\n            }).isRequired,\n          }).isRequired,\n        }),\n      ).isRequired,\n    }).isRequired,\n  }).isRequired,\n  pageContext: PropTypes.shape({\n    tag: PropTypes.string.isRequired,\n  }).isRequired,\n};\n\nexport const pageQuery = graphql`\n  query($tag: String!) {\n    allTag {\n      edges {\n        node {\n          color\n          name\n          description\n          path\n        }\n      }\n    }\n    allMdx(\n      filter: {\n        frontmatter: { tags: { in: [$tag] } } \n        internal: {\n          contentFilePath: { regex: \"/index.mdx?$/\" }\n        }\n      }\n      sort: {frontmatter: {date: DESC}}\n    ) {\n      edges {\n        node {\n          frontmatter {\n            cover {\n              childImageSharp {\n                gatsbyImageData(\n                  layout: CONSTRAINED\n                  width: 320\n                  height: 180\n                  transformOptions: {\n                    fit: CONTAIN\n                  }\n                )\n              }\n            }\n            \n          }\n          fields {\n            slug {\n              links {\n                name\n                url\n              }\n              date\n              venue\n              authors\n              path\n              title\n              tags\n              excerpt\n              type\n            }\n          }\n        }\n      }\n    }\n    allFile(filter: { name: { eq: $tag }, dir: { regex: \"/tags$/\" } }) {\n      edges {\n        node {\n          name\n          childImageSharp {\n            gatsbyImageData(\n              layout: CONSTRAINED\n              width: 600\n            )\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default TagPage;\n"],"names":["_ref","data","pageContext","tagName","tag","docs","allMdx","edges","posts","_filter","doc","node","frontmatter","type","research","tags","allTag","tagsMap","_mapValues","_keyBy","name","tagPagePath","path","tagDescription","description","React","SEO","title","Utils","resolvePageUrl","keywords","className","style","length","Row","gutter","map","post","key","Col","xs","sm","md","lg","ResearchCard","PostCard"],"sourceRoot":""}